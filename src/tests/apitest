#!/usr/bin/python
# -*- coding: utf-8 -*-
# $Id$
#
# PLC API Test
# Copyright (C) 2012 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no


import sys;
import xmlrpclib;
from datetime import datetime;

# Needs package python-ipaddr (Fedora Core)!
from ipaddr import *;



NorNetPLC_Name          = '132.252.156.21'
NorNetPLC_Root_User     = 'root@localhost.localdomain'
NorNetPLC_Root_Password = 'nntb-root'

NorNetProviders = {
 'Uninett'  :   1,
 'Hafslund' :   2,
 'Telenor'  :   3,
 'DFN'      : 222
}



# ====== Print log message ==================================================
def log(logstring):
   print datetime.now().isoformat() + ' ' + logstring;


# ====== Abort with error ===================================================
def error(logstring):
   print datetime.now().isoformat() + ' ===== ERROR: ' + logstring + " =====";
   sys.exit(1)


# ====== Log into PLC =======================================================
def loginToPLC():
   global plc_server
   global plc_authentication

   log('Logging into PLC ...')
   try:
      apiURL     = 'https://' + NorNetPLC_Name + '/PLCAPI/'
      plc_server = xmlrpclib.ServerProxy(apiURL, allow_none=True)

      plc_authentication = {}
      plc_authentication['AuthMethod'] = 'password'
      plc_authentication['Username']   = NorNetPLC_Root_User
      plc_authentication['AuthString'] = NorNetPLC_Root_Password

      if plc_server.AuthCheck(plc_authentication) != 1:
         error('Authorization at PLC failed!')

   except:
      error('Unable to log into PLC!')


# ====== Get list of NorNet nodes ===========================================
def getNodeList():
   global plc_server
   global plc_authentication

   log('Fetching node list ...')
   try:
      nodeList = plc_server.GetNodes(plc_authentication)
      return(nodeList)

   except:
      error('Unable to fetch node list!')


# ====== Get list of NorNet sites ===========================================
def getSiteList():
   global plc_server
   global plc_authentication

   log('Fetching site list ...')
   try:
      filter = {'is_public': True,
                'enabled':   True}
      siteList = plc_server.GetSites(plc_authentication, filter)
      return(siteList)

   except:
      error('Unable to fetch site list!')


# ====== Get list of site tags ==============================================
def getSiteTagsList(site):
   global plc_server
   global plc_authentication

   log('Fetching site tags ...')
   try:
      siteTagsList = plc_server.GetSiteTags(plc_authentication, site)
      return(siteTagsList)

   except:
      error('Unable to fetch site tag list!')


# ====== Find site ID =======================================================
def findSiteID(siteName):
   try:
      site = plc_server.GetSites(plc_authentication,
                                 {'name': siteName}, ['site_id'])
      siteID = int(site[0]['site_id'])
      return(siteID)

   except:
      return(0)


# ====== Find person ID =====================================================
def findPersonID(eMail):
   try:
      person = plc_server.GetPersons(plc_authentication,
                                     {'email': eMail}, ['person_id'])
      personID = int(person[0]['person_id'])
      return(personID)

   except:
      return(0)


# ====== Find person ID =====================================================
def findSliceID(sliceName):
   try:
      person = plc_server.GetSlices(plc_authentication,
                                     {'name': sliceName}, ['slice_id'])
      sliceID = int(person[0]['slice_id'])
      return(sliceID)

   except:
      return(0)


# ====== Create tag type ====================================================
def makeTagType(category, description, tagName):
   found = plc_server.GetTagTypes(plc_authentication, tagName, ['tag_type_id'])
   if len(found) == 0:
      tagType = {}
      tagType['category']    = category
      tagType['description'] = description
      tagType['tagname']     = tagName
      plc_server.AddTagType(plc_authentication, tagType)


# ====== Remove NorNet site =================================================
def removeNorNetSite(siteName):
   siteID = findSiteID(siteName)
   if siteID != 0:
      log('Deleting site ' + str(siteID) + ' ...')
      plc_server.DeleteSite(plc_authentication, siteID)


# ====== Create NorNet site =================================================
def makeNorNetSite(siteName, siteAbbrvName, siteLoginBase, siteUrl,
                   siteCity, siteProvince, cityCountry, siteCountryCode,
                   siteLatitude, siteLogitude):
   try:
      log('Adding site ' + siteName + ' ...')

      site = {}
      site['name']             = siteName
      site['abbreviated_name'] = siteAbbrvName
      site['login_base']       = siteLoginBase
      site['url']              = siteUrl
      site['enabled']          = True
      site['is_public']        = True
      site['latitude']         = siteLatitude
      site['longitude']        = siteLogitude
      site['max_slices']       = 10
      siteID = plc_server.AddSite(plc_authentication, site)
      if siteID <= 0:
         error('Unable to add site ' + siteName)

      if plc_server.AddSiteTag(plc_authentication, siteID, "nornet_site_city", siteCity) <= 0:
         error('Unable to add "nornet_site_city" tag to site ' + siteName)
      if plc_server.AddSiteTag(plc_authentication, siteID, "nornet_site_province", siteProvince) <= 0:
         error('Unable to add "nornet_site_province" tag to site ' + siteName)
      if plc_server.AddSiteTag(plc_authentication, siteID, "nornet_site_country", cityCountry) <= 0:
         error('Unable to add "nornet_site_country" tag to site ' + siteName)
      if plc_server.AddSiteTag(plc_authentication, siteID, "nornet_site_country_code", siteCountryCode) <= 0:
         error('Unable to add "nornet_site_country_code" tag to site ' + siteName)

      return siteID

   except Exception as e:
      error('Adding site ' + siteName + ' has failed: ' + str(e))


# ====== Create NorNet PCU ==================================================
def makeNorNetPCU(siteID, hostName, siteDomain, publicIPv4Address,
                  user, password, protocol, model, notes):
   try:
      pcuHostName = str.lower(hostName) + "." + str.lower(siteDomain);
      log('Adding PCU ' + pcuHostName + ' ...')

      pcu = {}
      pcu['username'] = user
      pcu['password'] = password
      pcu['protocol'] = protocol
      pcu['model']    = model
      pcu['notes']    = notes
      pcu['ip']       = str(publicIPv4Address)
      pcu['hostname'] = pcuHostName

      pcuID = plc_server.AddPCU(plc_authentication, siteID, pcu)
      if pcuID <= 0:
         error('Unable to add PCU ' + pcuHostName)

      return pcuID

   except Exception as e:
      error('Adding PCU ' + pcuHostName + ' has failed: ' + str(e))


# ====== Get NorNet interface IPv4 address ==================================
def makeNorNetIPv4(provider, site, host):
   p = int(provider)
   s = int(site)
   h = int(host)
   if ((p < 0) | (p > 255)):
      error('Bad provider ID')
   if ((s < 0) | (s > 255)):
      error('Bad site ID')
   if ((h < 0) | (h > 255)):
      error('Bad host ID')
   if site != 0:
      prefix = 24;
   else:
      prefix = 16;
   return IPNetwork('10.' + str(p) + '.' + str(s) + '.' + str(h) + '/' + str(prefix))


# ====== Create NorNet node =================================================
def makeNorNetNode(siteID, siteAbbrvName, siteDomain, siteNorNetID,
                   nodeNiceName, nodeNumber, nodeAddressNumber,
                   pcuID, pcuPort,
                   publicIPv4Address, publicGateway, publicDNS,
                   providerList):
   try:
      nodeHostName = str.lower(nodeNiceName) + "." + str.lower(siteDomain);
      log('Adding node ' + nodeHostName + ' ...')

      node = {}
      node['hostname']   = nodeHostName
      node['boot_state'] = 'reinstall'
      node['model']      = 'Amiga 5000'
      nodeID = plc_server.AddNode(plc_authentication, siteID, node)
      if nodeID <= 0:
         error('Unable to add node ' + nodeHostName)


      if pcuID > 0:
         if plc_server.AddNodeToPCU(plc_authentication, nodeID, pcuID, pcuPort) != 1:
            error('Unable to add node ' + nodeHostName + " to PCU " + str(pcuID) + ", port " + str(pcuPort))


      interface = {}
      interface['hostname']   = nodeHostName
      interface['is_primary'] = True
      interface['ifname']     = 'eth0'
      interface['type']       = 'ipv4'
      interface['method']     = 'static'
      interface['ip']         = str(publicIPv4Address.ip)
      interface['netmask']    = str(publicIPv4Address.netmask)
      interface['network']    = str(publicIPv4Address.network)
      interface['broadcast']  = str(publicIPv4Address.broadcast)
      interface['gateway']    = str(publicGateway)
      interface['dns1']       = str(publicDNS[0])
      if len(publicDNS) > 1:
         interface['dns2']    = str(publicDNS[1])
      if plc_server.AddInterface(plc_authentication, nodeID, interface) <= 0:
         error('Unable to add primary interface ' + str(publicAddress.ip))


      alias = 1
      for provider in providerList:
         providerID = NorNetProviders[provider]
         if providerID <= 0:
            error("Bad provider " + provider)


         ifHostName = 'node' + str(nodeNumber) + '-' + str.lower(provider) + '.' + str.lower(siteDomain)
         ifIPv4            = makeNorNetIPv4(providerID, siteNorNetID, nodeAddressNumber)
         ifGateway         = makeNorNetIPv4(providerID, siteNorNetID, 1)
         ifProviderNetwork = makeNorNetIPv4(providerID, 0, 0)

         interface = {}
         interface['hostname']   = ifHostName
         interface['is_primary'] = False
         interface['ifname']     = 'eth0'
         interface['type']       = 'ipv4'
         interface['method']     = 'static'
         interface['ip']         = str(ifIPv4.ip)
         interface['netmask']    = str(ifIPv4.netmask)
         interface['network']    = str(ifIPv4.network)
         interface['broadcast']  = str(ifIPv4.broadcast)
         interface['gateway']    = str(ifGateway.ip)

         interfaceID = plc_server.AddInterface(plc_authentication, nodeID, interface)
         if interfaceID <= 0:
            error('Unable to add secondary interface ' + str(ifIPv4.ip))

         if plc_server.AddInterfaceTag(plc_authentication, interfaceID, "alias", str(alias)) <= 0:
            error('Unable to add "alias" tag to interface ' + str(ifIPv4.ip))
         if plc_server.AddInterfaceTag(plc_authentication, interfaceID, "nornet_ifprovider_name", provider) <= 0:
            error('Unable to add "nornet_ifprovider_name" tag to interface ' + str(ifIPv4.ip))
         if plc_server.AddInterfaceTag(plc_authentication, interfaceID, "nornet_ifprovider_id", str(providerID)) <= 0:
            error('Unable to add "nornet_ifprovider_name" tag to interface ' + str(ifIPv4.ip))
         if plc_server.AddInterfaceTag(plc_authentication, interfaceID, "nornet_ifprovider_network", str(ifProviderNetwork)) <= 0:
            error('Unable to add "nornet_ifprovider_network" tag to interface ' + str(ifIPv4.ip))

      return nodeID

   except Exception as e:
      error('Adding node ' + nodeHostName + ' has failed: ' + str(e))



# ###########################################################################


def createTestConfiguration():
   makeTagType('site/nornet',      'NorNet Site City',                  'nornet_site_city')
   makeTagType('site/nornet',      'NorNet Site Province',              'nornet_site_province')
   makeTagType('site/nornet',      'NorNet Site Country',               'nornet_site_country')
   makeTagType('site/nornet',      'NorNet Site Country Code',          'nornet_site_country_code')

   makeTagType('interface/nornet', 'NorNet Interface Provider Name',    'nornet_ifprovider_name')
   makeTagType('interface/nornet', 'NorNet Interface Provider ID',      'nornet_ifprovider_id')
   makeTagType('interface/nornet', 'NorNet Interface Provider Network', 'nornet_ifprovider_network')




   removeNorNetSite("Alpha Test Site")
   removeNorNetSite("Beta Test Site")
   removeNorNetSite("Gamma Test Site")




   siteAlphaID = makeNorNetSite('Alpha Test Site', 'TA', 'ta', 'http://alpha.site',
                                'Ullevål', 'Østlandet', 'Norge', 'NO', 10.0, 50.0)
   siteAlphaPCUID = makeNorNetPCU(siteAlphaID, 'pcu', 'alpha.site', IPv4Address('132.252.156.2'),
                                  'pcu-root', 'a-secret-password', 'ssh', 'Amiga 5099', 'Jeg vet ikke.')
   siteAlphaNorNetID = 1

   siteBetaID  = makeNorNetSite('Beta Test Site', 'TB', 'tb', 'http://beta.site',
                                'Bygdøy',  'Østlandet', 'Norge', 'NO', 15.0, 55.0)
   siteBetaPCUID = makeNorNetPCU(siteBetaID, 'pcu', 'beta.site', IPv4Address('132.252.156.3'),
                                 'pcu-root', 'a-secret-password', 'ssh', 'Amiga 5099', 'Jeg vet ikke.')
   siteBetaNorNetID = 2

   siteGammaID = makeNorNetSite('Gamma Test Site', 'TC', 'tc', 'http://gamma.site',
                                'Essen',  'Nordrhein-Westfalen', 'Deutschland', 'DE', 12.5, 40.0)
   siteGammaPCUID = makeNorNetPCU(siteGammaID, 'pcu', 'gamma.site', IPv4Address('132.252.156.4'),
                                  'pcu-root', 'a-secret-password', 'ssh', 'Amiga 5099', 'Jeg vet ikke.')
   siteGammaNorNetID = 3


   names = sorted(['akerbrygge', 'bygdoey', 'ekeberg', 'fornebu', 'majorstuen', 'ullevaal'])
   firstAddress = 81
   i = 0
   for name in names:
      makeNorNetNode(siteAlphaID, 'Alpha', 'alpha.site', siteAlphaNorNetID,
                     name, 1 + i, firstAddress + i,
                     siteAlphaPCUID, 1 + i,
                     IPv4Network('132.252.156.' + str(firstAddress + i) + '/24'),
                     IPv4Address('132.252.156.1'),
                     [ IPv4Address('132.252.156.21') ],
                     ['Uninett', 'Telenor'])
      i = i + 1

   names = sorted(['bjordammen', 'sognsvann', 'svartkulp', 'tyrvann'])
   for name in names:
      makeNorNetNode(siteBetaID, 'Beta', 'beta.site', siteBetaNorNetID,
                     name, 1 + i, firstAddress + i,
                     siteBetaPCUID, 1 + i,
                     IPv4Network('132.252.156.' + str(firstAddress + i) + '/24'),
                     IPv4Address('132.252.156.1'),
                     [ IPv4Address('132.252.156.21') ],
                     ['Uninett', 'Telenor'])
      i = i + 1

   names = sorted(['altenessen', 'baldeneysee', 'borbeck', 'zollvererin'])
   for name in names:
      makeNorNetNode(siteGammaID, 'Gamma', 'gamma.site', siteGammaNorNetID,
                     name, 1 + i, firstAddress + i,
                     siteGammaPCUID, 1 + i,
                     IPv4Network('132.252.156.' + str(firstAddress + i) + '/24'),
                     IPv4Address('132.252.156.1'),
                     [ IPv4Address('132.252.156.21') ],
                     ['Uninett', 'Telenor', 'DFN'])
      i = i + 1

   personID = findPersonID('dreibh@simula.no')
   plc_server.AddPersonToSite(plc_authentication, personID, siteAlphaID)
   plc_server.AddPersonToSite(plc_authentication, personID, siteBetaID)
   plc_server.AddPersonToSite(plc_authentication, personID, siteGammaID)



   sliceID = findSliceID('nn_test')
   nodeList = getNodeList()
   nodeIDs  = []
   for node in nodeList:
      nodeID = int(node['node_id'])
      nodeIDs.append(nodeID)

   print nodeIDs
   plc_server.AddSliceToNodes(plc_authentication, sliceID, nodeIDs)


# ###########################################################################


log('***** This is NorNet version 1.0! *****')
loginToPLC()


# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
createTestConfiguration()
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!


i=1
siteList = getSiteList()
for site in siteList:
   print 'Site ',i
   print str(site['name']) + ': id=' + str(site['site_id']) + ' url=' + str(site['url'])

   siteID = findSiteID(str(site['name']))
   if siteID != 0:
      tags = getSiteTagsList(siteID)
      print tags

   i=i+1
