#!/usr/bin/python
# -*- coding: utf-8 -*-
# $Id$
#
# PLC API Test
# Copyright (C) 2012 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no


import sys;
import xmlrpclib;
import re;
from datetime import datetime;

# Needs package python-ipaddr (Fedora Core)!
from ipaddr import *;



NorNetPLC_Name          = '132.252.156.21'
NorNetPLC_Root_User     = 'root@localhost.localdomain'
NorNetPLC_Root_Password = 'nntb-root'

NorNet_MaxProviders     = 8
NorNet_ProviderList     = {
#   ID     Name                                Short Name (ASCII only!)
# =====================================================================
     0 : [ 'UNKNOWN',                          'unknown'  ],

     1 : [ 'Uninett',                          'uninett'  ],
     2 : [ 'Hafslund',                         'hafslund' ],

   100 : [ 'Telenor',                          'telenor'  ],
   101 : [ 'NetCom',                           'netcom'   ],
   102 : [ 'Tele2',                            'tele2'    ],
   103 : [ 'ICE',                              'ice'      ],

   222 : [ 'Deutsches Forschungsnetz',         'dfn'      ],
}
NorNet_TOSSettings = [ 0x00, 0x04, 0x08, 0x0C, 0x10, 0x14, 0x18, 0x1C ]


# ###### Get NorNet provider information ####################################
def getNorNetProviderInfo(providerIndex):
   try:
      return NorNet_ProviderList[providerIndex]
   except:
      return NorNet_ProviderList[0]


# ###### Print log message ==================================================
def log(logstring):
   print datetime.now().isoformat() + ' ' + logstring;


# ###### Abort with error ===================================================
def error(logstring):
   print datetime.now().isoformat() + ' ===== ERROR: ' + logstring + " =====";
   sys.exit(1)


# ###### Log into PLC =======================================================
def loginToPLC():
   global plc_server
   global plc_authentication

   log('Logging into PLC ...')
   try:
      apiURL     = 'https://' + NorNetPLC_Name + '/PLCAPI/'
      plc_server = xmlrpclib.ServerProxy(apiURL, allow_none=True)

      plc_authentication = {}
      plc_authentication['AuthMethod'] = 'password'
      plc_authentication['Username']   = NorNetPLC_Root_User
      plc_authentication['AuthString'] = NorNetPLC_Root_Password

      if plc_server.AuthCheck(plc_authentication) != 1:
         error('Authorization at PLC failed!')

   except:
      error('Unable to log into PLC!')


# ###### Get tag value or return a default ==================================
def getTagValue(tagList, tagName, default):
   for tag in tagList:
      if tag['tagname'] == tagName:
         return(tag['value'])
   return(default)


# ###### Fetch list of NorNet sites #########################################
def fetchNorNetSiteList():
   global plc_server
   global plc_authentication

   log('Fetching NorNet site list ...')
   try:
      filter = {'is_public': True,
                'enabled':   True}

      fullSiteList = plc_server.GetSites(plc_authentication, filter)

      norNetSiteList = dict([])
      for site in fullSiteList:
         siteID       = int(site['site_id']),
         siteTagsList = plc_server.GetSiteTags(plc_authentication,
                                               { 'site_id' : siteID },
                                               [ 'site_id', 'tagname', 'value' ])
         if int(getTagValue(siteTagsList, 'nornet_is_managed_site', '-1')) < 1:
            continue
         siteIndex    = int(getTagValue(siteTagsList, 'nornet_site_index', '-1'))
         siteName     = str(site['name'])
         siteAbbrev   = str(site['abbreviated_name'])
         if not re.match(r"^[a-zA-Z][a-zA-Z0-9]*$", siteAbbrev):
            error('Bad site abbreviation ' + siteAbbrev)
         if ((siteIndex < 0) or (siteIndex > 255)):
            error('Bad site index ' + str(siteIndex))

         norNetSite = {
            'site_id'         : siteID,
            'site_index'      : siteIndex,
            'site_short_name' : siteAbbrev,
            'site_long_name'  : str(site['name']),
            'site_tags'       : siteTagsList
         }

         norNetSiteList[siteIndex] = norNetSite

      return(norNetSiteList)

   except Exception as e:
      error('Unable to fetch NorNet site list: ' + str(e))


## ###### Get list of site tags ##############################################
#def fetchSiteTagsList(siteID):
   #global plc_server
   #global plc_authentication

   #try:
      #siteTagsList = plc_server.GetSiteTags(plc_authentication,
                                            #{ 'site_id' : siteID },
                                            #[ 'tagname', 'value' ])
      #return(siteTagsList)

   #except:
      #error('Unable to fetch site tag list!')


# ###### Get the providers a site is connected to ###########################
def getNorNetProvidersForSite(norNetSite):
   try:
      siteTagsList = norNetSite['site_tags']

      # ====== Get outgoing interfaces ======================================
      norNetProviderList = dict([])
      for i in range(0, NorNet_MaxProviders - 1):
         providerIndex = int(getTagValue(siteTagsList, 'nornet_site_tbp' + str(i) + '_index', '-1'))
         if providerIndex <= 0:
            continue
         providerInfo   = getNorNetProviderInfo(providerIndex)
         providerTbIPv4 = IPv4Address(getTagValue(siteTagsList, 'nornet_site_tbp' + str(i) + '_address_ipv4', '0.0.0.0'))
         providerTbIPv6 = IPv6Address(getTagValue(siteTagsList, 'nornet_site_tbp' + str(i) + '_address_ipv6', '::'))
         norNetProvider = {
            'provider_index'          : providerIndex,
            'provider_short_name'     : providerInfo[1],
            'provider_long_name'      : providerInfo[0],
            'provider_tunnelbox_ipv4' : providerTbIPv4,
            'provider_tunnelbox_ipv6' : providerTbIPv6
         }

         norNetProviderList[providerIndex] = norNetProvider

      return(norNetProviderList)

   except Exception as e:
      error('Unable to get NorNet providers for site ' + norNetSite['name'] + ': ' + str(e))


# ###### Get list of NorNet nodes ===========================================
def getNodeList():
   global plc_server
   global plc_authentication

   log('Fetching node list ...')
   try:
      nodeList = plc_server.GetNodes(plc_authentication)
      return(nodeList)

   except:
      error('Unable to fetch node list!')


# ###### Find site ID =======================================================
def findSiteID(siteName):
   try:
      site = plc_server.GetSites(plc_authentication,
                                 {'name': siteName}, ['site_id'])
      siteID = int(site[0]['site_id'])
      return(siteID)

   except:
      return(0)


# ###### Find person ID =====================================================
def findPersonID(eMail):
   try:
      person = plc_server.GetPersons(plc_authentication,
                                     {'email': eMail}, ['person_id'])
      personID = int(person[0]['person_id'])
      return(personID)

   except:
      return(0)


# ###### Find slice ID ======================================================
def findSliceID(sliceName):
   try:
      slice = plc_server.GetSlices(plc_authentication,
                                   {'name': sliceName}, ['slice_id'])
      sliceID = int(slice[0]['slice_id'])
      return(sliceID)

   except:
      return(0)


# ###### Find node ID =======================================================
def findNodeID(nodeName):
   try:
      node = plc_server.GetNodes(plc_authentication,
                                 {'hostname': nodeName}, ['node_id'])
      nodeID = int(node[0]['node_id'])
      return(nodeID)

   except:
      return(0)


# ###### Get list of node tags ==============================================
def getNodeTagsList(nodeID):
   global plc_server
   global plc_authentication

   try:
      nodeTagsList = plc_server.GetNodeTags(plc_authentication,
                                            { 'node_id' : nodeID },
                                            [ 'tagname', 'value' ])
      return(nodeTagsList)

   except:
      error('Unable to fetch node tag list!')


# ###### Create tag type ====================================================
def makeTagType(category, description, tagName):
   found = plc_server.GetTagTypes(plc_authentication, tagName, ['tag_type_id'])
   if len(found) == 0:
      tagType = {}
      tagType['category']    = category
      tagType['description'] = description
      tagType['tagname']     = tagName
      plc_server.AddTagType(plc_authentication, tagType)


# ###### Remove NorNet site =================================================
def removeNorNetSite(siteName):
   siteID = findSiteID(siteName)
   if siteID != 0:
      log('Deleting site ' + str(siteID) + ' ...')
      plc_server.DeleteSite(plc_authentication, siteID)


# ###### Create NorNet site =================================================
def makeNorNetSite(siteName, siteAbbrvName, siteLoginBase, siteUrl, siteNorNetDomain,
                   siteNorNetIndex, siteCity, siteProvince, cityCountry, siteCountryCode,
                   siteLatitude, siteLogitude,
                   providerList):
  try:
      log('Adding site ' + siteName + ' ...')

      site = {}
      site['name']             = siteName
      site['abbreviated_name'] = siteAbbrvName
      site['login_base']       = siteLoginBase
      site['url']              = siteUrl
      site['enabled']          = True
      site['is_public']        = True
      site['latitude']         = siteLatitude
      site['longitude']        = siteLogitude
      site['max_slices']       = 10
      siteID = plc_server.AddSite(plc_authentication, site)
      if siteID <= 0:
         error('Unable to add site ' + siteName)

      if plc_server.AddSiteTag(plc_authentication, siteID, 'nornet_is_managed_site', '1') <= 0:
         error('Unable to add "nornet_is_managed_site" tag to site ' + siteName)
      if plc_server.AddSiteTag(plc_authentication, siteID, 'nornet_site_index', str(siteNorNetIndex)) <= 0:
         error('Unable to add "nornet_site_index" tag to site ' + siteName)
      if plc_server.AddSiteTag(plc_authentication, siteID, 'nornet_site_city', siteCity) <= 0:
         error('Unable to add "nornet_site_city" tag to site ' + siteName)
      if plc_server.AddSiteTag(plc_authentication, siteID, 'nornet_site_domain', siteNorNetDomain) <= 0:
         error('Unable to add "nornet_site_domain" tag to site ' + siteName)
      if plc_server.AddSiteTag(plc_authentication, siteID, 'nornet_site_province', siteProvince) <= 0:
         error('Unable to add "nornet_site_province" tag to site ' + siteName)
      if plc_server.AddSiteTag(plc_authentication, siteID, 'nornet_site_country', cityCountry) <= 0:
         error('Unable to add "nornet_site_country" tag to site ' + siteName)
      if plc_server.AddSiteTag(plc_authentication, siteID, 'nornet_site_country_code', siteCountryCode) <= 0:
         error('Unable to add "nornet_site_country_code" tag to site ' + siteName)

      i = 0
      for provider in providerList:
         if i <= NorNet_MaxProviders:
            providerName = str(provider[0])
            providerNorNetIndex = -1
            for p in NorNet_ProviderList:
               if NorNet_ProviderList[p][0] == providerName:
                  providerNorNetIndex = p
                  break
            if providerNorNetIndex <= 0:
               error("Bad provider " + provider)
            providerIPv4 = IPv4Address(provider[1])
            providerIPv6 = IPv6Address(provider[2])

            if plc_server.AddSiteTag(plc_authentication, siteID, 'nornet_site_tbp' + str(i) + '_index', str(providerNorNetIndex)) <= 0:
               error('Unable to add "nornet_site_tbp' + str(i) + '_index" tag to site ' + siteName)
            if plc_server.AddSiteTag(plc_authentication, siteID, 'nornet_site_tbp' + str(i) + '_address_ipv4', str(providerIPv4)) <= 0:
               error('Unable to add "nornet_site_tbp' + str(i) + '_ipv4" tag to site ' + siteName)
            if plc_server.AddSiteTag(plc_authentication, siteID, 'nornet_site_tbp' + str(i) + '_address_ipv6', str(providerIPv6)) <= 0:
               error('Unable to add "nornet_site_tbp' + str(i) + '_ipv6" tag to site ' + siteName)

         i = i + 1


      return siteID

  except Exception as e:
     error('Adding site ' + siteName + ' has failed: ' + str(e))


# ###### Create NorNet PCU ==================================================
def makeNorNetPCU(siteID, hostName, siteNorNetDomain, publicIPv4Address,
                  user, password, protocol, model, notes):
   try:
      pcuHostName = str.lower(hostName) + '.' + str.lower(siteNorNetDomain);
      log('Adding PCU ' + pcuHostName + ' ...')

      pcu = {}
      pcu['username'] = user
      pcu['password'] = password
      pcu['protocol'] = protocol
      pcu['model']    = model
      pcu['notes']    = notes
      pcu['ip']       = str(publicIPv4Address)
      pcu['hostname'] = pcuHostName

      pcuID = plc_server.AddPCU(plc_authentication, siteID, pcu)
      if pcuID <= 0:
         error('Unable to add PCU ' + pcuHostName)

      return pcuID

   except Exception as e:
      error('Adding PCU ' + pcuHostName + ' has failed: ' + str(e))


# ###### Get NorNet interface IPv4 address ==================================
def makeNorNetIP(provider, site, host, version):
   p = int(provider)
   s = int(site)
   h = int(host)
   if ((p < 0) | (p > 255)):
      error('Bad provider ID')
   if ((s < 0) | (s > 255)):
      error('Bad site ID')
   if ((h < 0) | (h > 255)):
      error('Bad host ID')

   if version == 4:
      if site != 0:
         prefix = 24;
      else:
         prefix = 16;
      return IPv4Network('10.' + str(p) + '.' + str(s) + '.' + str(h) + '/' + str(prefix))
   else:
      if site != 0:
         prefix = 48;
      else:
         prefix = 32;
      return IPv6Network('fd00:' + \
                          str.replace(hex(p), '0x', '') + ':' + \
                          str.replace(hex(s), '0x', '') + ':' + \
                          str.replace(hex(h), '0x', '') + ':0:0::/' + str(prefix))


# ###### Get NorNet tunnel inner IPv4 address ===============================
def makeNorNetTunnelIP(outgoingSite, outgoingProvider, incomingSite, incomingProvider, version):
   if ((outgoingSite < 0) | (outgoingSite > 255)):
      error('Bad site ID')
   if ((incomingSite < 0) | (incomingSite > 255)):
      error('Bad site ID')
   if ((outgoingProvider < 0) | (outgoingProvider > 255)):
      error('Bad provider ID')
   if ((incomingProvider < 0) | (incomingProvider > 255)):
      error('Bad provider ID')

   if incomingSite < outgoingSite:
      side  = 1
      sLow  = incomingSite
      sHigh = outgoingSite
   else:
      side  = 2
      sLow  = outgoingSite
      sHigh = incomingSite

   if incomingProvider < outgoingProvider:
      pLow  = incomingProvider
      pHigh = outgoingProvider
   else:
      pLow  = outgoingProvider
      pHigh = incomingProvider

   if version == 4:
      address = ((pLow << 8 | pHigh) << 4) | side
      address = int(IPv4Address('192.168.0.0')) | address
      return IPv4Address(address)
      # network = str(IPv4Address(address)) + '/28'
      # return IPv4Network(network)
   else:
      source      = str.replace(hex((pLow << 8) | sLow), '0x', '')
      destination = str.replace(hex((pHigh << 8) | pLow), '0x', '')
      address     = 'fdff:ffff:' + source + ':' + destination + '::' + str(side)
      return IPv6Address(address)
      # network     = address + '/64'
      # return IPv6Network(network)


# ###### Get NorNet interface IPv4 address ==================================
def makeNorNetTunnelKey(outgoingSite, outgoingProvider, incomingSite, incomingProvider):
   if ((outgoingSite < 0) | (outgoingSite > 255)):
      error('Bad site ID')
   if ((incomingSite < 0) | (incomingSite > 255)):
      error('Bad site ID')
   if ((outgoingProvider < 0) | (outgoingProvider > 255)):
      error('Bad provider ID')
   if ((incomingProvider < 0) | (incomingProvider > 255)):
      error('Bad provider ID')

   if incomingSite < outgoingSite:
      sLow  = incomingSite
      pLow  = incomingProvider
      sHigh = outgoingSite
      pHigh = outgoingProvider
   else:
      sLow  = outgoingSite
      pLow  = outgoingProvider
      sHigh = incomingSite
      pHigh = incomingProvider

   tunnelID = (sLow << 24) | (pLow << 16) | \
              (sHigh << 8) | (pHigh)
   return(tunnelID)


# ###### Update interfaces of a node ========================================
def updateNorNetInterfaces(nodeID, siteTagsList):
   try:
      # ###### Get node tags ===================================================
      nodeTagList = getNodeTagsList(nodeID)
      nodeNorNetIndex = int(getTagValue(nodeTagList, 'nornet_node_index', '-1'))
      if nodeNorNetIndex < 0:
         error('Bad nornet_node_index setting')
      nodeNorNetAddress = int(getTagValue(nodeTagList, 'nornet_node_address', '-1'))
      if nodeNorNetAddress < 0:
         error('Bad nornet_node_address setting')

      # ###### Current interface settings ======================================
      currentAddressList     = [ ]
      currentInterfaceIDList = [ ]
      interfaceList = plc_server.GetInterfaces(plc_authentication, { 'node_id' : nodeID })
      for interface in interfaceList:
         interfaceID      = interface['interface_id']
         interfaceTagList = plc_server.GetInterfaceTags(plc_authentication,
                                                        { 'interface_id' : interfaceID })
         if int(getTagValue(interfaceTagList, 'nornet_is_managed_interface', 0)) > 0:
            currentAddressList.append(IPAddress(interface['ip']))
            currentInterfaceIDList.append(interfaceID)


      # ###### Current interface settings ======================================
      newAddressList = [ ]
      for i in range(0, NorNet_MaxProviders - 1):
         providerNorNetIndex = int(getTagValue(siteTagsList, 'nornet_site_tbp' + str(i) + '_index', '-1'))
         if providerNorNetIndex >= 0:
            siteNorNetIndex = int(getTagValue(siteTagsList, 'nornet_site_index', '-1'))
            if siteNorNetIndex < 0:
               error('Bad nornet_site_index setting')

            providerIPv4 = getTagValue(siteTagsList, 'nornet_site_tbp' + str(i) + '_address_ipv4', '')
            # providerIPv6 = getTagValue(siteTagsList, 'nornet_site_tbp' + str(i) + '_address_ipv6', '')
            if providerIPv4 != '':
               ifIPv4 = makeNorNetIP(providerNorNetIndex, siteNorNetIndex, nodeNorNetAddress, 4)
               newAddressList.append(IPv4Address(ifIPv4.ip))


      # ###### Update interfaces ===============================================
      if currentAddressList == newAddressList:
         return(0)

      siteNorNetDomain = getTagValue(siteTagsList, 'nornet_site_domain', '')
      if siteNorNetIndex == '':
         error('Bad nornet_site_domain setting')
      siteNorNetIndex = int(getTagValue(siteTagsList, 'nornet_site_index', '-1'))
      if siteNorNetIndex < 0:
         error('Bad nornet_site_index setting')

      alias = 1
      for i in range(0, NorNet_MaxProviders - 1):
         providerNorNetIndex = int(getTagValue(siteTagsList, 'nornet_site_tbp' + str(i) + '_index', '-1'))
         if providerNorNetIndex >= 0:
            providerNorNetName = getNorNetProviderInfo(providerNorNetIndex)[1]

            ifHostName = 'node' + str(nodeNorNetIndex) + '-' + str.lower(providerNorNetName) + '.' + str.lower(siteNorNetDomain)
            print ifHostName
            ifIPv4            = makeNorNetIP(providerNorNetIndex, siteNorNetIndex, nodeNorNetAddress, 4)
            ifGateway         = makeNorNetIP(providerNorNetIndex, siteNorNetIndex, 1, 4)
            ifProviderNetwork = makeNorNetIP(providerNorNetIndex, 0, 0, 4)

            interface = {}
            interface['hostname']   = ifHostName
            interface['is_primary'] = False
            interface['ifname']     = 'eth0'
            interface['type']       = 'ipv4'
            interface['method']     = 'static'
            interface['ip']         = str(ifIPv4.ip)
            interface['netmask']    = str(ifIPv4.netmask)
            interface['network']    = str(ifIPv4.network)
            interface['broadcast']  = str(ifIPv4.broadcast)
            interface['gateway']    = str(ifGateway.ip)

            interfaceID = plc_server.AddInterface(plc_authentication, nodeID, interface)
            if interfaceID <= 0:
               error('Unable to add secondary interface ' + str(ifIPv4.ip))

            if plc_server.AddInterfaceTag(plc_authentication, interfaceID, "alias", str(alias)) <= 0:
               error('Unable to add "alias" tag to interface ' + str(ifIPv4.ip))

            if plc_server.AddInterfaceTag(plc_authentication, interfaceID, 'nornet_is_managed_interface', '1') <= 0:
               error('Unable to add "nornet_is_managed_interface" tag to interface ' + str(ifIPv4.ip))
            if plc_server.AddInterfaceTag(plc_authentication, interfaceID, 'nornet_ifprovider_index', str(providerNorNetIndex)) <= 0:
               error('Unable to add "nornet_ifprovider_index" tag to interface ' + str(ifIPv4.ip))
            if plc_server.AddInterfaceTag(plc_authentication, interfaceID, 'nornet_ifprovider_network', str(ifProviderNetwork)) <= 0:
               error('Unable to add "nornet_ifprovider_network" tag to interface ' + str(ifIPv4.ip))

      return(1)

   except Exception as e:
      error('Updating interfaces of node ' + str(nodeID) + ' has failed: ' + str(e))


# ###### Create NorNet node =================================================
def makeNorNetNode(siteID, nodeNiceName, nodeNorNetIndex, firstAddressNumber,
                   pcuID, pcuPort,
                   publicIPv4Address, publicGateway, publicDNS):
   nodeHostName = nodeNiceName   # Domain to be set below!
   try:
      # ###### Get site information =========================================
      siteTagsList    = getSiteTagsList(siteID)
      siteNorNetIndex = int(getTagValue(siteTagsList, 'nornet_site_index', '-1'))
      if siteNorNetIndex < 0:
         error("Site " + str(siteID) + ' has no NorNet site index!')
      siteNorNetDomain = getTagValue(siteTagsList, 'nornet_site_domain', '')
      if siteNorNetIndex == '':
         error("Site " + str(siteID) + ' has no NorNet domain name!')


      # ###### Create node ==================================================
      nodeHostName = nodeHostName + '.' + str.lower(siteNorNetDomain);
      log('Adding node ' + nodeHostName + ' ...')

      node = {}
      node['hostname']   = nodeHostName
      node['boot_state'] = 'reinstall'
      node['model']      = 'Amiga 5000'
      nodeID = plc_server.AddNode(plc_authentication, siteID, node)
      if nodeID <= 0:
         error('Unable to add node ' + nodeHostName)

      if plc_server.AddNodeTag(plc_authentication, nodeID, 'nornet_is_managed_node', '1') <= 0:
         error('Unable to add "nornet_is_managed_node" tag to node ' + nodeHostName)
      if plc_server.AddNodeTag(plc_authentication, nodeID, 'nornet_node_index', str(nodeNorNetIndex)) <= 0:
         error('Unable to add "nornet_node_index" tag to node ' + nodeHostName)
      if plc_server.AddNodeTag(plc_authentication, nodeID, 'nornet_node_address', str(nodeNorNetIndex + firstAddressNumber)) <= 0:
         error('Unable to add "nornet_node_address" tag to node ' + nodeHostName)


      # ###### Add node to PCU ==============================================
      if pcuID > 0:
         if plc_server.AddNodeToPCU(plc_authentication, nodeID, pcuID, pcuPort) != 1:
            error('Unable to add node ' + nodeHostName + " to PCU " + str(pcuID) + ", port " + str(pcuPort))


      # ###### Create primary interface =====================================
      interface = {}
      interface['hostname']   = nodeHostName
      interface['is_primary'] = True
      interface['ifname']     = 'eth0'
      interface['type']       = 'ipv4'
      interface['method']     = 'static'
      interface['ip']         = str(publicIPv4Address.ip)
      interface['netmask']    = str(publicIPv4Address.netmask)
      interface['network']    = str(publicIPv4Address.network)
      interface['broadcast']  = str(publicIPv4Address.broadcast)
      interface['gateway']    = str(publicGateway)
      interface['dns1']       = str(publicDNS[0])
      if len(publicDNS) > 1:
         interface['dns2']    = str(publicDNS[1])
      print interface
      if plc_server.AddInterface(plc_authentication, nodeID, interface) <= 0:
         error('Unable to add primary interface ' + str(publicIPv4Address.ip))


      # ###### Create NorNet interfaces =====================================
      updateNorNetInterfaces(nodeID, siteTagsList)

      return nodeID

   except Exception as e:
      error('Adding node ' + nodeHostName + ' has failed: ' + str(e))



# ###########################################################################


def createTestConfiguration():
   makeTagType('site/nornet', 'NorNet Managed Site',      'nornet_is_managed_site')
   makeTagType('site/nornet', 'NorNet Site Index',        'nornet_site_index')
   makeTagType('site/nornet', 'NorNet Site Domain Name',  'nornet_site_domain')
   makeTagType('site/nornet', 'NorNet Site City',         'nornet_site_city')
   makeTagType('site/nornet', 'NorNet Site Province',     'nornet_site_province')
   makeTagType('site/nornet', 'NorNet Site Country',      'nornet_site_country')
   makeTagType('site/nornet', 'NorNet Site Country Code', 'nornet_site_country_code')

   for i in range(0, NorNet_MaxProviders - 1):
      makeTagType('site/nornet', 'NorNet Site Tunnelbox Provider-' + str(i) + ' Index',        'nornet_site_tbp' + str(i) + '_index')
      makeTagType('site/nornet', 'NorNet Site Tunnelbox Provider-' + str(i) + ' Address IPv4', 'nornet_site_tbp' + str(i) + '_address_ipv4')
      makeTagType('site/nornet', 'NorNet Site Tunnelbox Provider-' + str(i) + ' Address IPv6', 'nornet_site_tbp' + str(i) + '_address_ipv6')

   makeTagType('node/nornet',      'NorNet Managed Node',         'nornet_is_managed_node')
   makeTagType('node/nornet',      'NorNet Node Index',           'nornet_node_index')
   makeTagType('node/nornet',      'NorNet Node Address Index',   'nornet_node_address')

   makeTagType('interface/nornet', 'NorNet Managed Interface',     'nornet_is_managed_interface')



   makeTagType('interface/nornet', 'NorNet Interface Provider Index',     'nornet_ifprovider_index')
   makeTagType('interface/nornet', 'NorNet Interface Provider Network',   'nornet_ifprovider_network')




   removeNorNetSite("Alpha Test Site")
   removeNorNetSite("Beta Test Site")
   removeNorNetSite("Gamma Test Site")




   siteAlphaNorNetIndex = 1
   siteAlphaID = makeNorNetSite('Alpha Test Site', 'TA', 'ta', 'http://www.alpha.site', 'alpha.site',
                                siteAlphaNorNetIndex, 'Ullevål', 'Østlandet', 'Norge', 'NO', 10.0, 50.0, [
                                   [ 'Uninett', IPv4Address('132.252.156.70'), IPv6Address('fd55:5555::70') ],
                                   [ 'Telenor', IPv4Address('169.254.100.70'), IPv6Address('::') ]
                                ])
   siteAlphaPCUID = makeNorNetPCU(siteAlphaID, 'pcu', 'alpha.site', IPv4Address('132.252.156.2'),
                                  'pcu-root', 'a-secret-password', 'ssh', 'Amiga 5099', 'Jeg vet ikke.')

   siteBetaNorNetIndex = 2
   siteBetaID  = makeNorNetSite('Beta Test Site', 'TB', 'tb', 'http://www.beta.site', 'beta.site',
                                siteBetaNorNetIndex, 'Bygdøy',  'Østlandet', 'Norge', 'NO', 15.0, 55.0, [
                                   [ 'Uninett', IPv4Address('132.252.156.71'), IPv6Address('fd55:5555::71') ],
                                   [ 'Telenor', IPv4Address('169.254.100.71'), IPv6Address('::') ]
                                ])
   siteBetaPCUID = makeNorNetPCU(siteBetaID, 'pcu', 'beta.site', IPv4Address('132.252.156.3'),
                                 'pcu-root', 'a-secret-password', 'ssh', 'Amiga 5099', 'Jeg vet ikke.')

   siteGammaNorNetIndex = 3
   siteGammaID = makeNorNetSite('Gamma Test Site', 'TC', 'tc', 'http://www.gamma.site', 'gamma.site',
                                siteGammaNorNetIndex, 'Essen',  'Nordrhein-Westfalen', 'Deutschland', 'DE', 12.5, 40.0, [
                                   [ 'Uninett', IPv4Address('132.252.156.72'), IPv6Address('::') ],
                                   [ 'Telenor', IPv4Address('169.254.100.72'), IPv6Address('::') ],
                                   [ 'Deutsches Forschungsnetz', IPv4Address('172.31.255.72'),  IPv6Address('::') ]
                                ])
   siteGammaPCUID = makeNorNetPCU(siteGammaID, 'pcu', 'gamma.site', IPv4Address('132.252.156.4'),
                                  'pcu-root', 'a-secret-password', 'ssh', 'Amiga 5099', 'Jeg vet ikke.')


   firstAddressIndex = 81
   i = 0

   names = sorted(['akerbrygge', 'bygdoey', 'ekeberg', 'fornebu', 'majorstuen', 'ullevaal'])
   for name in names:
      makeNorNetNode(siteAlphaID, name, 1 + i, firstAddressIndex,
                     siteAlphaPCUID, 1 + i,
                     IPv4Network('132.252.156.' + str(firstAddressIndex + i) + '/24'),
                     IPv4Address('132.252.156.1'),
                     [ IPv4Address('132.252.156.21') ])
      i = i + 1

   names = sorted(['bjordammen', 'sognsvann', 'svartkulp', 'tyrvann'])
   for name in names:
      makeNorNetNode(siteBetaID, name, 1 + i, firstAddressIndex,
                     siteBetaPCUID, 1 + i,
                     IPv4Network('132.252.156.' + str(firstAddressIndex + i) + '/24'),
                     IPv4Address('132.252.156.1'),
                     [ IPv4Address('132.252.156.21') ])
      i = i + 1

   names = sorted(['altenessen', 'baldeneysee', 'borbeck', 'zollvererin'])
   for name in names:
      makeNorNetNode(siteGammaID, name, 1 + i, firstAddressIndex,
                     siteGammaPCUID, 1 + i,
                     IPv4Network('132.252.156.' + str(firstAddressIndex + i) + '/24'),
                     IPv4Address('132.252.156.1'),
                     [ IPv4Address('132.252.156.21') ])
      i = i + 1



   personID = findPersonID('dreibh@simula.no')
   plc_server.AddPersonToSite(plc_authentication, personID, siteAlphaID)
   plc_server.AddPersonToSite(plc_authentication, personID, siteBetaID)
   plc_server.AddPersonToSite(plc_authentication, personID, siteGammaID)



   sliceID = findSliceID('nn_test')
   nodeList = getNodeList()
   nodeIDs  = []
   for node in nodeList:
      nodeID = int(node['node_id'])
      nodeIDs.append(nodeID)

   print nodeIDs
   plc_server.AddSliceToNodes(plc_authentication, sliceID, nodeIDs)


# ###########################################################################


log('***** This is NorNet version 1.0! *****')
loginToPLC()


# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#createTestConfiguration()
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!



# ###### Create a configuration file ########################################
def makeConfigFile(type, configurationName):
   outputFile = open(configurationName, 'w')
   outputFile.write('# ===== ' + type + ' configuration ===============\n')
   now = datetime.now().isoformat()
   info = str.replace(str.lower(configurationName), '-', '_')
   outputFile.write('# Generated on ' + now + '\n\n')
   outputFile.write(info + '="' + now + '"\n\n')

   return outputFile


# ###### Generate provider configuration ####################################
def makeProviderConfiguration():
   configurationName = 'provider-config'
   outputFile = makeConfigFile('provider', configurationName)

   providers         = 0
   providerIndexSet  = []
   providerAbbrevSet = []
   for providerIndex in NorNet_ProviderList:
      providerName   = NorNet_ProviderList[providerIndex][0]
      providerAbbrev = NorNet_ProviderList[providerIndex][1]
      if not re.match(r"^[a-z][a-z0-9]*$", providerAbbrev):
         error('Bad provider abbreviation ' + providerAbbrev)
      if ((providerIndex < 0) or (providerIndex > 255)):
         error('Bad provider index ' + str(providerIndex))

      outputFile.write('provider' + str(providerIndex) + '_longname="'  + providerName   + '"\n')
      outputFile.write('provider' + str(providerIndex) + '_shortname="' + providerAbbrev + '"\n')
      outputFile.write('nnp_' + providerAbbrev + '=' + str(providerIndex) + '\n\n')

      providerIndexSet.append(providerIndex)
      providerAbbrevSet.append(providerAbbrev)
      providers=providers+1

   if len(providerIndexSet) != len(set(providerIndexSet)):
      error('Provider list contains non-unqiue index values')
   if len(providerAbbrevSet) != len(set(providerAbbrevSet)):
      error('Provider list contains non-unqiue abbreviation values')

   outputFile.close()
   return configurationName


# ###### Generate site configuration ########################################
def makeSiteConfiguration(fullSiteList, site):
   configurationName = 'site-' + site['site_short_name'] + '-config'
   outputFile = makeConfigFile('Site', configurationName)

   log('Making site configuration for ' + site['site_long_name'] + ' ...')

   siteIndex        = site['site_index']
   siteShortName    = str.lower(site['site_short_name'])
   siteProviderList = getNorNetProvidersForSite(site)
   for providerIndex in siteProviderList:
      provider            = siteProviderList[providerIndex]
      providerShortName   = provider['provider_short_name']
      providerNetworkIPv4 = makeNorNetIP(providerIndex, siteIndex, 0, 4)
      providerNetworkIPv6 = makeNorNetIP(providerIndex, siteIndex, 0, 6)
      outputFile.write(siteShortName + '_' + providerShortName + '_network_ipv4="' + str(providerNetworkIPv4) + '"\n')
      outputFile.write(siteShortName + '_' + providerShortName + '_network_ipv6="' + str(providerNetworkIPv6) + '"\n')

   makeTunnelBoxConfiguration(fullSiteList, site, True)

   outputFile.close()
   return configurationName


# ###### Generate sites configuration #######################################
def makeNorNetConfiguration():
   configurationName = 'nornet-config'
   outputFile = makeConfigFile('nornet', configurationName)

   providerConfigurationName = makeProviderConfiguration()
   outputFile.write('. ./' + providerConfigurationName + '\n\n')

   fullSiteList = fetchNorNetSiteList()

   for localSiteIndex in fullSiteList:
      localSite = fullSiteList[localSiteIndex]
      print 'local=' + localSite['site_long_name']

      siteConfigurationName = makeSiteConfiguration(fullSiteList, localSite)
      outputFile.write('. ./' + siteConfigurationName + '\n')

   outputFile.close()
   return configurationName


# ###### Generate tunnelbox configuration ###################################

def getTableID(opIndex):
   return 1000000 + opIndex


def getTablePref(opIndex, tos):
   if tos != 0:
     return 100 + opIndex
   else:
     return 1000 + opIndex


def getTunnel(localSite, localProvider, remoteSite, remoteProvider, version):
   localSiteIndex      = localSite['site_index']
   localProviderIndex  = localProvider['provider_index']
   localSiteTags       = localSite['site_tags']
   remoteProviderIndex = remoteProvider['provider_index']
   remoteSiteIndex     = remoteSite['site_index']
   remoteSiteTags      = remoteSite['site_tags']

   # ====== Get tunnel configuration ========================================
   tunnelOverIPv4 = False
   if (version != 4):
      localOuterAddress  = localProvider['provider_tunnelbox_ipv6']
      remoteOuterAddress = remoteProvider['provider_tunnelbox_ipv6']
      if ((localOuterAddress == IPv6Address('::')) or (remoteOuterAddress == IPv6Address('::'))):
         tunnelOverIPv4 = True
      else:
         tunnelInterface = 'seks' + str(remoteSiteIndex) + "-" + str(localProviderIndex) + '-' + str(remoteProviderIndex)
   if ((version == 4) or (tunnelOverIPv4 == True)):
      localOuterAddress  = localProvider['provider_tunnelbox_ipv4']
      remoteOuterAddress = remoteProvider['provider_tunnelbox_ipv4']
      tunnelInterface    = 'gre' + str(remoteSiteIndex) + "-" + str(localProviderIndex) + '-' + str(remoteProviderIndex)
   localInnerAddress     =  makeNorNetTunnelIP(localSiteIndex, localProviderIndex,
                                               remoteSiteIndex, remoteProviderIndex, version)
   remoteInnerAddress    =  makeNorNetTunnelIP(remoteSiteIndex, remoteProviderIndex,
                                               localSiteIndex, localProviderIndex, version)
   tunnelKey = makeNorNetTunnelKey(localSiteIndex, localProviderIndex,
                                   remoteSiteIndex, remoteProviderIndex)

   # ====== Create tunnel structure =========================================
   norNetTunnel = {
      'tunnel_interface'            : tunnelInterface,
      'tunnel_local_outer_address'  : localOuterAddress,
      'tunnel_remote_outer_address' : remoteOuterAddress,
      'tunnel_local_inner_address'  : localInnerAddress,
      'tunnel_remote_inner_address' : remoteInnerAddress,
      'tunnel_key'                  : tunnelKey,
      'tunnel_over_ipv4'            : tunnelOverIPv4
   }

   return norNetTunnel


def _makeTunnelboxProvider(fullSiteList, localSite, localProviderList, localProvider, pathNumber):
   configurationName = 'tunnelbox-' + localSite['site_short_name'] + '-' + \
                       localProvider['provider_short_name'] + '-config'
   outputFile = makeConfigFile('Tunnelbox-Provider', configurationName)
   log('Making tunnelbox provider configuration for ' + \
       localSite['site_long_name'] + '/' + localProvider['provider_long_name'] + ' ...')

   localSiteIndex     = localSite['site_index']
   localProviderIndex = localProvider['provider_index']
   stateList          = [ 'stop', 'start', 'status' ]
   for state in stateList:
      if ((state == 'start') or (state == 'stop')):
         outputFile.write('if [ "$state" = "' + state + '" -o "$state" = "restart" ] ; then\n')
      else:
         outputFile.write('if [ "$state" = "' + state + '" ] ; then\n')

      # ====== Create provider-specific routing table =======================
      routingTableID = getTableID(localProviderIndex)
      if (state == 'start'):
         routingTableTOSPref    = getTablePref(localProviderIndex, 1)
         routingTableSourcePref = getTablePref(localProviderIndex, 0)
         if pathNumber + 1 < len(NorNet_TOSSettings):
            routingTableTOS = NorNet_TOSSettings[pathNumber + 1]
         else:
            routingTableTOS = 0x00
         outputFile.write('   make-table ' + str(routingTableID) + '   # ' + \
                          localProvider['provider_long_name'] + ' table\n')

         if routingTableTOS != 0x00:
            outputFile.write('   add-table-selector ' + str(routingTableID) + ' tos ' + hex(routingTableTOS) + ' pref ' + str(routingTableTOSPref) + '\n')
         for version in [ 4, 6 ]:
            localProviderNetwork = makeNorNetIP(localProviderIndex, 0, 0, version)
            outputFile.write('   add-table-selector ' + str(routingTableID) + ' from ' + str(localProviderNetwork) + ' pref ' + str(routingTableSourcePref) + '\n')
      elif (state == 'stop'):
         outputFile.write('   remove-table ' + str(routingTableID) + '\n')


      # ====== Create provider-specific tunnels and routes ==================
      for remoteSiteIndex in fullSiteList:
         if remoteSiteIndex == localSiteIndex:
            continue
         remoteSite         = fullSiteList[remoteSiteIndex]
         remoteProviderList = getNorNetProvidersForSite(remoteSite)
         outputFile.write('   # ------ ' + localSite['site_long_name'] + \
                          ' (' + str(localSite['site_index']) + ') <-> ' + \
                          remoteSite['site_long_name'] + \
                          ' (' + str(remoteSite['site_index']) + ') ------\n')

         for remoteProviderIndex in remoteProviderList:
            remoteProvider = remoteProviderList[remoteProviderIndex]
            outputFile.write('   # ~~~~~~ ' + remoteProvider['provider_long_name'] + \
                             ' (' + str(remoteProvider['provider_index']) + ') ~~~~~~\n')
            for version in [ 4, 6 ]:
               tunnel        = getTunnel(localSite, localProvider, remoteSite, remoteProvider, version)
               remoteNetwork = makeNorNetIP(remoteProviderIndex, remoteSiteIndex, 0, version)


               # ====== Create tunnels ======================================
               if (state == 'start'):
                  options = ''
                  if ((version == 6) and (tunnel['tunnel_over_ipv4'] == True)):
                     options = '--add-to-existing-tunnel'
                  outputFile.write('   make-tunnel ' + \
                                   tunnel['tunnel_interface']                 + ' ' + \
                                   hex(tunnel['tunnel_key'])                  + ' ' + \
                                   str(tunnel['tunnel_local_outer_address'])  + ' ' + \
                                   str(tunnel['tunnel_remote_outer_address']) + ' ' + \
                                   str(tunnel['tunnel_local_inner_address'])  + ' ' + \
                                   str(tunnel['tunnel_remote_inner_address']) + ' ' + \
                                   '"' + options + '"\n')
               elif (state == 'stop'):
                  if not ((version == 6) and (tunnel['tunnel_over_ipv4'] == True)):
                     outputFile.write('   remove-tunnel ' + \
                                      tunnel['tunnel_interface'] + ' ' + \
                                      hex(tunnel['tunnel_key'])  + '\n')
               elif (state == 'status'):
                  if not ((version == 6) and (tunnel['tunnel_over_ipv4'] == True)):
                     outputFile.write('   show-tunnel ' + \
                                      tunnel['tunnel_interface'] + ' "' +
                                      localSite['site_long_name'] + \
                                      str(localSite['site_index']) + ' <-> ' + \
                                      remoteSite['site_long_name'] + \
                                      ' (' + str(remoteSite['site_index']) + ') via [' + \
                                      remoteProvider['provider_long_name'] + \
                                      ' (' + str(remoteProvider['provider_index']) + ') <--> ' + \
                                      localProvider['provider_long_name'] + \
                                      ' (' + str(localProvider['provider_index']) + ')]"\n')


               # ====== Create provider-specific routing table entries ======
               if (state == 'start'):
                  outputFile.write('   make-route ' + \
                                   str(routingTableID) + ' ' +
                                   str(remoteNetwork) + ' ' +
                                   str(tunnel['tunnel_remote_inner_address']) + ' ' + \
                                   tunnel['tunnel_interface'] + '   # via ' + \
                                   localProvider['provider_long_name'] + ' <--> ' + \
                                   remoteProvider['provider_long_name'] + ' tunnel\n')
                  metric        = 10
                  if remoteProviderIndex == localProviderIndex:
                     metric = 5
                  outputFile.write('   make-route ' + \
                                   'main ' +
                                   str(remoteNetwork) + ' ' +
                                   str(tunnel['tunnel_remote_inner_address']) + ' ' + \
                                   tunnel['tunnel_interface'] + ' ' + \
                                   'metric ' + str(metric) + '   # via ' + \
                                   localProvider['provider_long_name'] + ' <--> ' + \
                                   remoteProvider['provider_long_name'] + ' tunnel\n')


      outputFile.write('fi\n\n')
      pathNumber = pathNumber + 1

   outputFile.close()
   return configurationName


def makeTunnelBoxConfiguration(fullSiteList, localSite, v4only):
   configurationName = 'tunnelbox-' + localSite['site_short_name'] + '-config'
   outputFile = makeConfigFile('Tunnelbox', configurationName)
   log('Making tunnelbox configuration for ' + localSite['site_long_name'] + ' ...')

   localProviderList = getNorNetProvidersForSite(localSite)
   localSiteIndex    = localSite['site_index']
   pathNumber        = 0
   for localProviderIndex in localProviderList:
      localProvider = localProviderList[localProviderIndex]
      tbpName = _makeTunnelboxProvider(fullSiteList, localSite,
                                       localProviderList, localProvider,
                                       pathNumber)
      outputFile.write('. ./' + tbpName + '\n')
      pathNumber = pathNumber + 1

   outputFile.close()
   return configurationName


def makeNodeConfiguration(nodeID):
   # ###### Get node information ============================================
   nodeList = plc_server.GetNodes(plc_authentication, {'node_id': nodeID} )
   if len(nodeList) != 1:
      error('Cannot find node ' + str(nodeID))
   node        = nodeList[0]
   nodeName    = node['hostname']
   nodeTagList = getNodeTagsList(nodeID)
   nodeNorNetIndex = int(getTagValue(nodeTagList, 'nornet_node_index', '-1'))
   if nodeNorNetIndex < 0:
      error('Bad nornet_node_index setting')
   nodeNorNetAddress = int(getTagValue(nodeTagList, 'nornet_node_address', '-1'))
   if nodeNorNetAddress < 0:
      error('Bad nornet_node_address setting')

   outputFile = open(nodeName + '-config', 'w')
   outputFile.write('# ===== Node configuration for ' + nodeName + ' =====\n')
   outputFile.write('# Generated on ' + datetime.now().isoformat() + '\n\n')

   print 'Node configuration for: ' + nodeName


# ###########################################################################


makeProviderConfiguration()
makeNorNetConfiguration()


#f = fetchNorNetSiteList()
#for s in f:
   #print f[s]
   #p = getNorNetProvidersForSite(f[s])


#siteID = findSiteID('Alpha Test Site')
#makeTunnelBoxConfiguration(siteID)

#siteID = findSiteID('Beta Test Site')
#makeTunnelBoxConfiguration(siteID,True)


#nodeID = findNodeID('altenessen.gamma.site')
#print "N=",nodeID
#makeNodeConfiguration(nodeID)
