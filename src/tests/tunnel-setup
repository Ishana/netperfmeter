#!/bin/bash
# $Id$
#
# Tunnel Setup Script
# Copyright (C) 2012 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no
#


# $1 = Interface
# $2 = GRE Tunnel Key
# $3 = TOS
# $4 = Outer Local IP
# $5 = Outer Remote IP
# $6 = Inner Local IP
# $7 = Outer Local IP
# $8 = Route
make-tunnel ()
{
   local interface=$1
   local tunnelKey=$2
   local tos=$3
   local outerLocalIP=$4
   local outerRemoteIP=$5
   local innerLocalIP=$6
   local innerRemoteIP=$7
   local route=$8

   # ====== Tunnel setup ====================================================
   ip tunnel del $interface 2>/dev/null || true
   ip tunnel add $interface mode gre local $outerLocalIP remote $outerRemoteIP ttl 255 key $tunnelKey
   # Turn off Reverse Path filtering, since it prevents routing packets
   # from interface when this interface has no route to the source!
   sysctl net.ipv4.conf.$interface.rp_filter=0
   # Also, turn off Reverse Path filter on all interfaces.
   # If it is turned on, it supersedes all per-interface settings!
   sysctl net.ipv4.conf.all.rp_filter=0
   # Finally, configure an address and turn the interface up
   ip addr add $innerLocalIP peer $innerRemoteIP dev $interface
   ip link set dev $interface up
   
   # ====== Routing table setup =============================================
   if [ "$route" != "" ] ; then
      let tosPref=10000+$tunnelKey
      let sourcePref=11000+$tunnelKey
   
      # Create rule for TOS setting
      if [ "$tos" != "0x00" ] ; then
         # Add rule to PREROUTING chain, for *routed* packets
         iptables -t mangle -A PREROUTING -m tos --tos $tos/0xfc -j MARK --set-mark $fwmark $tunnelKey
         # Also add rule to OUTPUT chain, for packets originating from *this* machine!
         iptables -t mangle -A OUTPUT -m tos --tos $tos/0xfc -j MARK --set-mark $fwmark $tunnelKey
         # Ensure that marked packets use the right routing table
         ip rule del fwmark $tunnelKey table $tunnelKey pref $tosPref 2>/dev/null || true
         ip rule add fwmark $tunnelKey table $tunnelKey pref $tosPref
      fi

      # Create rule from interface IP address
      ip rule del from $innerLocalIP table $tunnelKey pref $sourcePref 2>/dev/null || true
      ip rule add from $innerLocalIP table $tunnelKey pref $sourcePref
      
      # Add source-specific default route via new interface
      ip route add $innerRemoteIP dev $interface table $tunnelKey
      ip route add $route via $innerRemoteIP dev $interface table $tunnelKey
      
      echo "$route from $innerLocalIP via $innerRemoteIP/$interface (selected by TOS $tos)"
   fi
}
