#!/bin/sh
# $Id$
#
# Network Performance Meter
# Copyright (C) 2009-2010 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@iem.uni-due.de
#

# ###### Testbed in Essen #################################
# West:
# N1=132.252.153.10/29
# N2=132.252.153.14/29
# S1=89.246.242.228/29
# S2=132.252.153.138/29

# East:
# N1=132.252.153.18/29
# N2=132.252.153.22/29
# S1=89.246.242.230/29
# S2=132.252.153.146/29

# North:
# Nw=132.252.153.9/29
# Ne=132.252.153.17/29

# South:
# Sw=132.252.153.137/29
# Se=132.252.153.145/29
# #########################################################


LocalOpts="-verbosity=1"

if [ "$Scenario" = "DisjointPaths" ] ; then
  HOST_EAST="132.252.153.18"
  ROUTER_NORTH="132.252.153.9"
  NETWORK_NW="132.252.153.8/29"
  NETWORK_NE="132.252.153.16/29"
  ROUTER_SOUTH="132.252.153.137"
  NETWORK_SW="132.252.153.136/29"
  NETWORK_SE="132.252.153.144/29"

  HOST_WEST="132.252.153.10,132.252.153.138"
  LocalOpts="$LocalOpts -local=$HOST_WEST"
  RemoteNode="$HOST_EAST:7010"
elif [ "$Scenario" = "SharedBottleneck" ] ; then
  HOST_EAST="132.252.153.18"
  ROUTER_NORTH="132.252.153.9"
  NETWORK_NW="132.252.153.8/29"
  NETWORK_NE="132.252.153.16/29"
  ROUTER_SOUTH="132.252.153.137"
  NETWORK_SW="132.252.153.136/29"
  NETWORK_SE="132.252.153.144/29"

  HOST_WEST="132.252.153.10,132.252.153.14"
  LocalOpts="$LocalOpts -local=$HOST_WEST"
  RemoteNode="$HOST_EAST:7020"
elif [ "$Scenario" = "Burgsteinfurt" ] ; then
  HOST_EAST="87.139.124.106"   #   DFN=212.201.121.87
  ROUTER_NORTH="132.252.153.9"
  NETWORK_NW="132.252.153.8/29"
  NETWORK_NE="212.201.121.87/27"
  ROUTER_SOUTH="132.252.153.137"
  NETWORK_SW="89.246.242.228/32"
  NETWORK_SE="87.139.124.106/32"

  HOST_WEST="132.252.153.10,89.246.242.228"
  LocalOpts="$LocalOpts -local=$HOST_WEST"
  RemoteNode="$HOST_EAST:7000"
else
   echo >&2 "ERROR: Bad scenario setting $Scenario!"
   exit 1
fi

if [ "$Directory" = "" ] ; then
   echo >&2 "ERROR: Bad directory setting $Directory!"
   exit 1
fi


# ###### Variables ##########################################################
Variables="Run Runtime Flows CompareWithReference ReferenceFlowProtocol OnlyOneAssoc Unordered Unreliable ReferenceUnordered ReferenceUnreliable FrameRate FrameSize SndBuf RcvBuf InitialCwnd CwndMaxBurst OptionCMT OptionDAC OptionNRSACK OptionRP OptionBufferSplitting BidirectionalQoS RateNorthernTrail DelayNorthernTrail LossNorthernTrail ErrorNorthernTrail RateSouthernTrail DelaySouthernTrail LossSouthernTrail ErrorSouthernTrail"


# ###### Defaults ###########################################################
Run_VALUES="1"
Runtime_VALUES="60"
Flows_VALUES="1"
CompareWithReference_VALUES="false"
ReferenceFlowProtocol_VALUES="SCTP"
OnlyOneAssoc_VALUES="true"
FrameRate_VALUES="const0"
FrameSize_VALUES="const1452"
Unordered_VALUES="0.0"
Unreliable_VALUES="0.0"
ReferenceUnordered_VALUES="-1"
ReferenceUnreliable_VALUES="-1"
SndBuf_VALUES="233016"
RcvBuf_VALUES="233016"
InitialCwnd_VALUES="3"
CwndMaxBurst_VALUES="false"
OptionCMT_VALUES="false"
OptionRP_VALUES="false"
OptionDAC_VALUES="false"
OptionNRSACK_VALUES="false"
OptionBufferSplitting_VALUES="none"
BidirectionalQoS_VALUES="false"
RateNorthernTrail_VALUES="1000"
DelayNorthernTrail_VALUES="0"
LossNorthernTrail_VALUES="0"
ErrorNorthernTrail_VALUES="0"
RateSouthernTrail_VALUES="-1"
DelaySouthernTrail_VALUES="-1"
LossSouthernTrail_VALUES="-1"
ErrorSouthernTrail_VALUES="-1"


# ###### Perform a single run with current variable settings ################
perform_run ()
{
   if [ -e "$runStatus" ] ; then
      echo "Already existing."
   else
      # ====== QoS setup ====================================================
      if [ $RateSouthernTrail -eq -1 ] ; then
         RateSouthernTrail=$RateNorthernTrail
      fi
      if [ $DelaySouthernTrail -eq -1 ] ; then
         DelaySouthernTrail=$DelayNorthernTrail
      fi
      if [ $LossSouthernTrail -eq -1 ] ; then
         LossSouthernTrail=$LossNorthernTrail
      fi
      if [ $ErrorSouthernTrail -eq -1 ] ; then
         ErrorSouthernTrail=$ErrorNorthernTrail
      fi
      SETTING_ReferenceUnreliable=$ReferenceUnreliable
      if [ "$SETTING_ReferenceUnreliable" = "-1" ] ; then
         SETTING_ReferenceUnreliable=$Unreliable
      fi
      SETTING_ReferenceUnordered=$ReferenceUnordered
      if [ "$SETTING_ReferenceUnordered" = "-1" ] ; then
         SETTING_ReferenceUnordered=$Unordered
      fi

      ~/src/netperfmeter/src/rootshell ~/src/netperfmeter/src/setsctp cmt $OptionCMT dac $OptionDAC nrsack $OptionNRSACK rp $OptionRP bufferSplitting $OptionBufferSplitting initialCwnd $InitialCwnd cwndMaxBurst $CwndMaxBurst || exit 1
      ssh $HOST_EAST ~/src/netperfmeter/src/rootshell ~/src/netperfmeter/src/setsctp cmt $OptionCMT dac $OptionDAC nrsack $OptionNRSACK rp $OptionRP bufferSplitting $OptionBufferSplitting initialCwnd $InitialCwnd cwndMaxBurst $CwndMaxBurst || exit 1
      echo "===== QoS: ssh $ROUTER_NORTH ~/src/netperfmeter/src/rootshell ~/src/netperfmeter/src/setqos 1 $NETWORK_NW $NETWORK_NE $RateNorthernTrail $DelayNorthernTrail $LossNorthernTrail $ErrorNorthernTrail $BidirectionalQoS ====="
      ssh $ROUTER_NORTH ~/src/netperfmeter/src/rootshell ~/src/netperfmeter/src/setqos 1 $NETWORK_NW $NETWORK_NE $RateNorthernTrail $DelayNorthernTrail $LossNorthernTrail $ErrorNorthernTrail $BidirectionalQoS || exit 1
      echo "===== QoS: ssh $ROUTER_SOUTH ~/src/netperfmeter/src/rootshell ~/src/netperfmeter/src/setqos 1 $NETWORK_SW $NETWORK_SE $RateSouthernTrail $DelaySouthernTrail $LossSouthernTrail $ErrorSouthernTrail $BidirectionalQoS ====="
      ssh $ROUTER_SOUTH ~/src/netperfmeter/src/rootshell ~/src/netperfmeter/src/setqos 1 $NETWORK_SW $NETWORK_SE $RateSouthernTrail $DelaySouthernTrail $LossSouthernTrail $ErrorSouthernTrail $BidirectionalQoS || exit 1

      # ====== NetPerfMeter run =============================================
      local runDirectory="$1"
      local runStatus="$2"
      runScalar="$runDirectory/output.sca.bz2"
      # --- runVector="$runDirectory/output.vec.bz2"
      runConfig="$runDirectory/output.config"

      local command="./netperfmeter $RemoteNode $LocalOpts"
      command="$command -scalar=$runScalar"
      # --- command="$command -vector=$runVector"
      command="$command -config=$runConfig"
      command="$command -runtime=$Runtime"

      cmt="off"
      rp="off"
      nrsack="off"
      if [ "$OptionCMT" = "true" ] ; then
         cmt="on"
      fi
      if [ "$OptionRP" = "true" ] ; then
         rp="on"
      fi

      if [ "$OnlyOneAssoc" = "true" ] ; then
         local n=0
         local id=1
         command="$command -sctp "
         while [ $n -lt $Flows ] ; do
            command="$command $FrameRate:$FrameSize:const0:const0:id=$id:unordered=$Unordered:unreliable=$Unreliable:sndbuf=$SndBuf:rcvbuf=$RcvBuf:cmt=$cmt:rp=$rp "
            let n=$n+1
            let id=$id+1
         done
      else
         local n=0
         local id=1
         while [ $n -lt $Flows ] ; do
            command="$command -sctp $FrameRate:$FrameSize:const0:const0:id=$id:unordered=$Unordered:unreliable=$Unreliable:sndbuf=$SndBuf:rcvbuf=$RcvBuf "
            let n=$n+1
            let id=$id+1
         done
      fi

      if [ "$CompareWithReference" = "true" ] ; then
         protocolSelector="-bad"
         if [ "$ReferenceFlowProtocol" = "TCP" ] ; then
            protocolSelector="-tcp"
         elif [ "$ReferenceFlowProtocol" = "SCTP" ] ; then
            protocolSelector="-sctp"
         else
            echo >&2 "ERROR: Bad setting of ReferenceFlowProtocol: $ReferenceFlowProtocol!"
            exit 1
         fi
         local n=0
         local id=1001
         while [ $n -lt $Flows ] ; do
            command="$command $protocolSelector $FrameRate:$FrameSize:const0:const0:id=$id:unordered=$SETTING_ReferenceUnordered:unreliable=$SETTING_ReferenceUnreliable:sndbuf=$SndBuf:rcvbuf=$RcvBuf:cmt=off:rp=off "
            let n=$n+1
            let id=$id+1
         done
      fi

      echo $command
      ( $command && \
        ssh $ROUTER_NORTH ~/src/netperfmeter/src/rootshell ~/src/netperfmeter/src/setqos 1 $NETWORK_NW $NETWORK_NE && \
        ssh $ROUTER_SOUTH ~/src/netperfmeter/src/rootshell ~/src/netperfmeter/src/setqos 1 $NETWORK_SW $NETWORK_SE && \
        touch $runStatus ) || exit 1
   fi

   additionalVariables="IsActive RunDirectory"   # Tell finish_runs() to add "IsActive"
   runScalarActive="$runDirectory/output-active.sca.bz2"
   runScalarPassive="$runDirectory/output-passive.sca.bz2"
   echo "--values=$varSettings 1 \"$runDirectory\""   >>$summaryName
   echo "--input=$runScalarActive"  >>$summaryName
   echo "--values=$varSettings 0 \"$runDirectory\""   >>$summaryName
   echo "--input=$runScalarPassive" >>$summaryName
}


# ###### Initialize directory and summary configuration #####################
initialize_runs ()
{
   if [ ! -e "$Directory" ] ; then
      mkdir "$Directory"
   fi

   resultsDirectory="$Directory/Results"
   if [ ! -e "$resultsDirectory" ] ; then
      mkdir "$resultsDirectory"
   fi

   summaryName="$Directory/summary.config"
   if [ -e "$summaryName" ] ; then
      rm $summaryName
   fi
   echo "--resultsdirectory=$resultsDirectory" >$summaryName
   additionalVariables=""
}


# ###### Create summary #####################################################
finish_runs ()
{
   createsummary "$@ $additionalVariables" -batch <$summaryName
}


# ###### Create and perform all runs ########################################
make_runs ()
{
   # ====== Look for MD5 calculator program =================================
   MD5="BAD"
   ( echo Test | md5 )  >/dev/null 2>&1  && MD5="md5"
   if [ "$MD5" = "BAD" ] ; then
      ( echo Test | md5sum )  >/dev/null 2>&1  && MD5="md5sum"
   fi
   if [ "$MD5" = "BAD" ] ; then
      ( echo Test | md5deep )  >/dev/null 2>&1  && MD5="md5deep"
   fi

   # ====== Generate all setting of the current variable $1 =================
   if [ "$1" != "" ] ; then
      local varName="$1"
      local varValues=`eval "echo \\\$$varName""_VALUES"`
      local value
      if [ "$varValues" = "" ] ; then
         echo >&2 "ERROR: No settings for variable $varName found!"
         exit 1
      fi
      shift
      for value in $varValues ; do
         # ====== Use setting $value and recursively set other variables ====
         eval "$varName=$value"
         make_runs $@
      done

   # ====== All variables have been set -> generate a run ===================
   else
      local runLabel=""
      local varSettings=""
      echo -e "===== Run =================="
      echo "Variables:"
      for vN in $Variables ; do
         eval "e=\$$vN"
         echo " - $vN=$e"
         runLabel="$runLabel--$e"
         varSettings="$varSettings $e"
      done
      echo "============================"

      local runHash="`echo $runLabel | $MD5 | awk '{ print zz $1 }'`"
      local runDirectory="$Directory/Run-$runHash"
      local runStatus="$runDirectory/status.txt"

      if [ ! -e "$runDirectory" ] ; then
         mkdir "$runDirectory"
      fi
      perform_run $runDirectory $runStatus
   fi
}


# ###### Perform whole measurement ##########################################
perform_measurements ()
{
   initialize_runs $Variables
   make_runs $Variables
   finish_runs $Variables
}
