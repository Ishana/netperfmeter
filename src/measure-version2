#!/bin/bash
# $Id$
#
# Network Performance Meter
# Copyright (C) 2009-2012 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@iem.uni-due.de
#

if [ "$Directory" = "" ] ; then
   echo >&2 "ERROR: Bad directory setting $Directory!"
   exit 1
fi


# ###### Variables ##########################################################
Variables="Run Runtime Scenario Flows ReferenceFlows CompareWithReference ReferenceFlowProtocol OnlyOneAssoc Unordered Unreliable ReferenceUnordered ReferenceUnreliable FrameRate FrameSize SndBuf RcvBuf InitialCwnd CwndMaxBurst CMTCCVariant OptionDAC OptionNRSACK OptionBufferSplitting BidirectionalQoS RateNorthernTrail DelayNorthernTrail LossNorthernTrail ErrorNorthernTrail QueueTypeNorthernTrail FrameCapacityNorthernTrail RedMinThNorthernTrail RedMaxThNorthernTrail RedMaxPNorthernTrail RedWqNorthernTrail RateSouthernTrail DelaySouthernTrail LossSouthernTrail ErrorSouthernTrail QueueTypeSouthernTrail FrameCapacitySouthernTrail RedMinThSouthernTrail RedMaxThSouthernTrail RedMaxPSouthernTrail RedWqSouthernTrail Protocol"

# ###### Control ############################################################
MaxTrials=10            # If something goes wrong, try again up to 10 times
PauseBetweenTrials=60   # If something goes wrong, retry after 60s

# ###### Defaults ###########################################################
Run_VALUES="1"
Scenario_Values="TestLocal"
Runtime_VALUES="60"

Flows_VALUES="1"
ReferenceFlows_VALUES="1"
CompareWithReference_VALUES="false"
ReferenceFlowProtocol_VALUES="SCTP"
OnlyOneAssoc_VALUES="true"
FrameRate_VALUES="const0"
FrameSize_VALUES="const1452"
Unordered_VALUES="0.0"
Unreliable_VALUES="0.0"
ReferenceUnordered_VALUES="-1"
ReferenceUnreliable_VALUES="-1"
Protocol_VALUES="SCTP"

CMTCCVariant_VALUES="off"
SndBuf_VALUES="233016"
RcvBuf_VALUES="233016"
InitialCwnd_VALUES="3"
CwndMaxBurst_VALUES="false"
OptionDAC_VALUES="true"
OptionNRSACK_VALUES="false"
OptionBufferSplitting_VALUES="none"
BidirectionalQoS_VALUES="false"

RateNorthernTrail_VALUES="1000"
DelayNorthernTrail_VALUES="0"
LossNorthernTrail_VALUES="0"
ErrorNorthernTrail_VALUES="0"

QueueTypeNorthernTrail_VALUES="red"
FrameCapacityNorthernTrail_VALUES="80"
RedMinThNorthernTrail_VALUES="20"
RedMaxThNorthernTrail_VALUES="80"
RedMaxPNorthernTrail_VALUES="0.02"
RedWqNorthernTrail_VALUES="0.002"

RateSouthernTrail_VALUES="-1"
DelaySouthernTrail_VALUES="-1"
LossSouthernTrail_VALUES="-1"
ErrorSouthernTrail_VALUES="0"

QueueTypeSouthernTrail_VALUES="-1"
FrameCapacitySouthernTrail_VALUES="-1"
RedMinThSouthernTrail_VALUES="-1"
RedMaxThSouthernTrail_VALUES="-1"
RedMaxPSouthernTrail_VALUES="-1"
RedWqSouthernTrail_VALUES="-1"



# ###### Perform a single run with current variable settings ################
perform_run ()
{
   if [ -e "$runStatus" ] ; then
      echo "Already existing."
   else
      local trial=1
      local success=0
      while [ $success -eq 0 -a $trial -le $MaxTrials ] ; do
         success=1
         if [ $trial -gt 1 ] ; then
            echo "##### TRIAL $trial/$MaxTrials #####"
            echo "Waiting $PauseBetweenTrials s ..."
            sleep $PauseBetweenTrials
         fi

         # ====== Configure QoS settings ====================================
         LocalOpts="-verbosity=1"

         # ###### Testbed in Essen #################################
         # West:
         # N1=132.252.153.10/29
         # S1=89.246.242.228/29
         # N2=132.252.153.14/29
         # S2=132.252.153.138/29

         # East:
         # N1=132.252.153.18/29
         # S1=89.246.242.230/29
         # N2=132.252.153.22/29
         # S2=132.252.153.146/29

         # North:
         # Nw1=132.252.153.9/29
         # Ne1=132.252.153.17/29

         # South:
         # S1w=89.246.242.226/29   (!)
         # S1e=89.246.242.226/29   (!)
         # Sw2=132.252.153.137/29
         # Se2=132.252.153.145/29
         # #########################################################

         if [ "$Scenario" = "DisjointPaths" ] ; then
            HOST_EAST="132.252.153.18"
            ROUTER_NORTH="132.252.153.9"
            NETWORK_NW="132.252.153.8/29"
            NETWORK_NE="132.252.153.16/29"
            ROUTER_SOUTH="89.246.242.226"
            NETWORK_SW="89.246.242.228/29"
            NETWORK_SE="89.246.242.228/29"

            HOST_WEST="132.252.153.10,89.246.242.228"
            LocalOpts="$LocalOpts -local=$HOST_WEST"
            RemoteNode="$HOST_EAST:7010"

         elif [ "$Scenario" = "SharedBottleneck" ] ; then
            HOST_EAST="132.252.153.18"
            ROUTER_NORTH="132.252.153.9"
            NETWORK_NW="132.252.153.8/29"
            NETWORK_NE="132.252.153.16/29"
            ROUTER_SOUTH="132.252.153.137"
            NETWORK_SW="132.252.153.136/29"
            NETWORK_SE="132.252.153.144/29"

            HOST_WEST="132.252.153.10,132.252.153.14"
            LocalOpts="$LocalOpts -local=$HOST_WEST"
            RemoteNode="$HOST_EAST:7020"

         elif [ "$Scenario" = "Burgsteinfurt" ] ; then
            HOST_EAST="212.201.121.86"   #   DFN=212.201.121.86   DSL=87.139.124.106
            # HOST_EAST="87.139.124.106"   #   DFN=212.201.121.86   DSL=87.139.124.106
            ROUTER_NORTH="132.252.153.9"
            NETWORK_NW="132.252.153.8/29"
            NETWORK_NE="212.201.121.64/27"
            ROUTER_SOUTH=""
            NETWORK_SW=""
            NETWORK_SE=""

            HOST_WEST="132.252.153.10,89.246.242.228"
            LocalOpts="$LocalOpts -local=$HOST_WEST"
            RemoteNode="$HOST_EAST:7000"
			
         elif [ "$Scenario" = "haikou-cmt" ] ; then
            HOST_EAST="210.37.45.149"    
            ROUTER_NORTH="132.252.153.9"
            NETWORK_NW="132.252.153.8/29"
            NETWORK_NE="210.37.45.128/26"
            ROUTER_SOUTH=""
            NETWORK_SW=""
            NETWORK_SE="" 

            HOST_WEST="132.252.153.10,89.246.242.228"
            LocalOpts="$LocalOpts -local=$HOST_WEST"
            RemoteNode="$HOST_EAST:7000"

         elif [ "$Scenario" = "haikou-mptcp" ] ; then
            HOST_EAST="210.37.45.148"   
            ROUTER_NORTH="132.252.153.9"
            NETWORK_NW="132.252.153.8/29"
            NETWORK_NE="210.37.45.128/26"
            ROUTER_SOUTH=""
            NETWORK_SW=""
            NETWORK_SE="" 

            HOST_WEST="132.252.153.10,89.246.242.228"
            LocalOpts="$LocalOpts -local=$HOST_WEST"
            RemoteNode="$HOST_EAST:7000"

         elif [ "$Scenario" = "TestLocal" ] ; then
            HOST_EAST="127.0.0.1"
            ROUTER_NORTH="127.0.0.1"
            NETWORK_NW="127.0.0.1/32"
            NETWORK_NE="127.0.0.1/32"
            ROUTER_SOUTH=""
            NETWORK_SW="--OFF--"
            NETWORK_SE="--OFF--"

            HOST_WEST="127.0.0.1"
            LocalOpts="$LocalOpts -local=$HOST_WEST"
            RemoteNode="$HOST_EAST:7000"

         else
            echo >&2 "ERROR: Bad scenario setting $Scenario!"
            exit 1
         fi

         # ====== Configure QoS settings ====================================
         SETTING_FrameCapacitySouthernTrail=$FrameCapacitySouthernTrail
         if [ $SETTING_FrameCapacitySouthernTrail -eq -1 ] ; then
            SETTING_FrameCapacitySouthernTrail=$FrameCapacityNorthernTrail
         fi
         SETTING_QueueTypeSouthernTrail=$QueueTypeSouthernTrail
         if [ "$SETTING_QueueTypeSouthernTrail" = "-1" ] ; then
            SETTING_QueueTypeSouthernTrail=$QueueTypeNorthernTrail
         fi
         SETTING_RedMinThSouthernTrail=$RedMinThSouthernTrail
         if [ $SETTING_RedMinThSouthernTrail -eq -1 ] ; then
            SETTING_RedMinThSouthernTrail=$RedMinThNorthernTrail
         fi
         SETTING_RedMaxThSouthernTrail=$RedMaxThSouthernTrail
         if [ $SETTING_RedMaxThSouthernTrail -eq -1 ] ; then
            SETTING_RedMaxThSouthernTrail=$RedMaxThNorthernTrail
         fi
         SETTING_RedMaxPSouthernTrail=$RedMaxPSouthernTrail
         if [ $SETTING_RedMaxPSouthernTrail -eq -1 ] ; then
            SETTING_RedMaxPSouthernTrail=$RedMaxPNorthernTrail
         fi
         SETTING_RedWqSouthernTrail=$RedWqSouthernTrail
         if [ $SETTING_RedWqSouthernTrail -eq -1 ] ; then
            SETTING_RedWqSouthernTrail=$RedWqNorthernTrail
         fi

         SETTING_RateSouthernTrail=$RateSouthernTrail
         if [ $SETTING_RateSouthernTrail -eq -1 ] ; then
            SETTING_RateSouthernTrail=$RateNorthernTrail
         fi
         SETTING_DelaySouthernTrail=$DelaySouthernTrail
         if [ $SETTING_DelaySouthernTrail -eq -1 ] ; then
            SETTING_DelaySouthernTrail=$DelayNorthernTrail
         fi
         SETTING_LossSouthernTrail=$LossSouthernTrail
         if [ $SETTING_LossSouthernTrail -eq -1 ] ; then
            SETTING_LossSouthernTrail=$LossNorthernTrail
         fi
         SETTING_ErrorSouthernTrail=$ErrorSouthernTrail
         if [ $SETTING_ErrorSouthernTrail -eq -1 ] ; then
            SETTING_ErrorSouthernTrail=$ErrorNorthernTrail
         fi
         SETTING_ReferenceUnreliable=$ReferenceUnreliable
         if [ "$SETTING_ReferenceUnreliable" = "-1" ] ; then
            SETTING_ReferenceUnreliable=$Unreliable
         fi
         SETTING_ReferenceUnordered=$ReferenceUnordered
         if [ "$SETTING_ReferenceUnordered" = "-1" ] ; then
            SETTING_ReferenceUnordered=$Unordered
         fi

         echo -e "$HOST_WEST:\tsetsctp cmt $CMTCCVariant dac $OptionDAC nrsack $OptionNRSACK bufferSplitting $OptionBufferSplitting initialCwnd $InitialCwnd cwndMaxBurst $CwndMaxBurst"
         ~/src/netperfmeter/src/rootshell ~/src/netperfmeter/src/setsctp \
            cmt $CMTCCVariant dac $OptionDAC nrsack $OptionNRSACK \
            bufferSplitting $OptionBufferSplitting initialCwnd $InitialCwnd \
            cwndMaxBurst $CwndMaxBurst || success=0

         echo -e "$HOST_EAST:\tsetsctp cmt $CMTCCVariant dac $OptionDAC nrsack $OptionNRSACK bufferSplitting $OptionBufferSplitting initialCwnd $InitialCwnd cwndMaxBurst $CwndMaxBurst"
         ssh $HOST_EAST ~/src/netperfmeter/src/rootshell ~/src/netperfmeter/src/setsctp \
            cmt $CMTCCVariant dac $OptionDAC nrsack $OptionNRSACK \
            bufferSplitting $OptionBufferSplitting initialCwnd $InitialCwnd \
            cwndMaxBurst $CwndMaxBurst || success=0

         echo -e "### $ROUTER_NORTH:\tsetqos 1 $NETWORK_NW $NETWORK_NE $RateNorthernTrail $DelayNorthernTrail $LossNorthernTrail $ErrorNorthernTrail $BidirectionalQoS queueType $QueueTypeNorthernTrail frameCapacity $FrameCapacityNorthernTrail redMinTh $RedMinThNorthernTrail redMaxTh $RedMaxThNorthernTrail redMaxP $RedMaxPNorthernTrail redWq $RedWqNorthernTrail"

         ssh $ROUTER_NORTH ~/src/netperfmeter/src/rootshell -chdir=src/netperfmeter/src/ \
            ./setqos 1 $NETWORK_NW $NETWORK_NE \
            $RateNorthernTrail $DelayNorthernTrail $LossNorthernTrail $ErrorNorthernTrail $BidirectionalQoS \
            queueType $QueueTypeNorthernTrail frameCapacity $FrameCapacityNorthernTrail \
            redMinTh $RedMinThNorthernTrail redMaxTh $RedMaxThNorthernTrail \
            redMaxP $RedMaxPNorthernTrail redWq $RedWqNorthernTrail || success=0

         if [ "$ROUTER_SOUTH" != "" ] ; then
            echo -e "### $ROUTER_SOUTH:\tsetqos 1 $NETWORK_SW $NETWORK_SE $SETTING_RateSouthernTrail $SETTING_DelaySouthernTrail $SETTING_LossSouthernTrail $SETTING_ErrorSouthernTrail $BidirectionalQoS queueType $SETTING_QueueTypeSouthernTrail frameCapacity $SETTING_FrameCapacitySouthernTrail redMinTh $SETTING_RedMinThSouthernTrail redMaxTh $SETTING_RedMaxThSouthernTrail redMaxP $SETTING_RedMaxPSouthernTrail redWq $SETTING_RedWqSouthernTrail"
            ssh $ROUTER_SOUTH ~/src/netperfmeter/src/rootshell -chdir=src/netperfmeter/src/ \
               ./setqos 1 $NETWORK_SW $NETWORK_SE \
               $SETTING_RateSouthernTrail $SETTING_DelaySouthernTrail \
               $SETTING_LossSouthernTrail $SETTING_ErrorSouthernTrail $BidirectionalQoS \
               queueType $SETTING_QueueTypeSouthernTrail frameCapacity $SETTING_FrameCapacitySouthernTrail \
               redMinTh $SETTING_RedMinThSouthernTrail redMaxTh $SETTING_RedMaxThSouthernTrail \
               redMaxP $SETTING_RedMaxPSouthernTrail redWq $SETTING_RedWqSouthernTrail || success=0
         else
            echo -e "### NO SOUTHERN TRAIL"
         fi

         # ====== NetPerfMeter run ==========================================
         if [ $success -eq 1 ] ; then
            local runDirectory="$1"
            local runStatus="$2"
            runScalar="$runDirectory/output.sca.bz2"
            # --- runVector="$runDirectory/output.vec.bz2"
            runConfig="$runDirectory/output.config"

            local command="./netperfmeter $RemoteNode $LocalOpts"
            command="$command -scalar=$runScalar"
            # --- command="$command -vector=$runVector"
            command="$command -config=$runConfig"
            command="$command -runtime=$Runtime"

            if [ "$OnlyOneAssoc" = "true" ] ; then
               mainProtocolSelector="-bad"
               if [ "$Protocol" = "TCP" ] ; then
                  mainProtocolSelector="-tcp"
               elif [ "$Protocol" = "SCTP" ] ; then
                  mainProtocolSelector="-sctp"
               else
                  echo >&2 "ERROR: Bad setting of Protocol: $Protocol!"
                  exit 1
               fi
	       local n=0
               local id=1
               command="$command $mainProtocolSelector "
               while [ $n -lt $Flows ] ; do
                  command="$command $FrameRate:$FrameSize:const0:const0:id=$id:unordered=$Unordered:unreliable=$Unreliable:sndbuf=$SndBuf:rcvbuf=$RcvBuf:cmt=$CMTCCVariant "
                  n=$(($n+1))
                  id=$(($id+1))
               done
            else
               mainProtocolSelector="-bad"
               if [ "$Protocol" = "TCP" ] ; then
                  mainProtocolSelector="-tcp"
               elif [ "$Protocol" = "SCTP" ] ; then
                  mainProtocolSelector="-sctp"
               else
                  echo >&2 "ERROR: Bad setting of Protocol: $Protocol!"
                  exit 1
               fi
               local n=0
               local id=1
               while [ $n -lt $Flows ] ; do
                  command="$command $mainProtocolSelector $FrameRate:$FrameSize:const0:const0:id=$id:unordered=$Unordered:unreliable=$Unreliable:sndbuf=$SndBuf:rcvbuf=$RcvBuf "
                  n=$(($n+1))
                  id=$(($id+1))
               done
            fi

            if [ "$CompareWithReference" = "true" ] ; then
               protocolSelector="-bad"
               if [ "$ReferenceFlowProtocol" = "TCP" ] ; then
                  protocolSelector="-tcp"
               elif [ "$ReferenceFlowProtocol" = "SCTP" ] ; then
                  protocolSelector="-sctp"
               else
                  echo >&2 "ERROR: Bad setting of ReferenceFlowProtocol: $ReferenceFlowProtocol!"
                  exit 1
               fi
               local n=0
               local id=1001
               while [ $n -lt $ReferenceFlows ] ; do
                  command="$command $protocolSelector $FrameRate:$FrameSize:const0:const0:id=$id:unordered=$SETTING_ReferenceUnordered:unreliable=$SETTING_ReferenceUnreliable:sndbuf=$SndBuf:rcvbuf=$RcvBuf:cmt=off "
                  n=$(($n+1))
                  id=$(($id+1))
               done
            fi

            # ====== NetPerfMeter run =======================================
            echo $command
            $command || success=0
         fi

         # ====== Remove QoS settings =======================================
         ssh $ROUTER_NORTH ~/src/netperfmeter/src/rootshell -chdir=src/netperfmeter/src/ ./setqos 1 $NETWORK_NW $NETWORK_NE || success=0
         if [ "$ROUTER_SOUTH" != "" ] ; then
            ssh $ROUTER_SOUTH ~/src/netperfmeter/src/rootshell -chdir=src/netperfmeter/src/ ./setqos 1 $NETWORK_SW $NETWORK_SE || success=0
         fi

         trial=$(($trial+1))
      done

      if [ $success -eq 0 ] ; then
         echo >&2 "====== ERROR: MEASUREMENT HAS FAILED! ======"
         exit 1
      fi
      touch $runStatus
   fi

   additionalVariables="IsActive RunDirectory"   # Tell finish_runs() to add "IsActive"
   runScalarActive="$runDirectory/output-active.sca.bz2"
   runScalarPassive="$runDirectory/output-passive.sca.bz2"
   echo "--values=$varSettings 1 \"$runDirectory\""   >>$summaryName
   echo "--input=$runScalarActive"  >>$summaryName
   echo "--values=$varSettings 0 \"$runDirectory\""   >>$summaryName
   echo "--input=$runScalarPassive" >>$summaryName
}


# ###### Initialize directory and summary configuration #####################
initialize_runs ()
{
   if [ ! -e "$Directory" ] ; then
      mkdir "$Directory"
   fi

   resultsDirectory="$Directory/Results"
   if [ ! -e "$resultsDirectory" ] ; then
      mkdir "$resultsDirectory"
   fi

   summaryName="$Directory/summary.config"
   if [ -e "$summaryName" ] ; then
      rm $summaryName
   fi
   echo "--resultsdirectory=$resultsDirectory" >$summaryName
   additionalVariables=""
}


# ###### Create summary #####################################################
finish_runs ()
{
   variables="$@ $additionalVariables"
   ./createsummary "$variables" -batch -quiet <$summaryName
}


# ###### Obtain total number of runs ########################################
# Stores total runs in TotalRuns variable
# Stores number of variations for variable VAR in NumberOfVariations_VAR
count_runs ()
{
   # ====== Count all setting of the current variable $1 ====================
   if [ "$1" != "" ] ; then
      local varName="$1"
      local varValues=`eval "echo \\\$$varName""_VALUES"`
      if [ "$varValues" = "" ] ; then
         echo >&2 "ERROR: No settings for variable $varName found!"
         exit 1
      fi
      shift
      local i=0
      for value in $varValues ; do
         i=$(($i+1))
         count_runs $@
      done
      eval "export NumberOfVariations_$varName=$i"

   # ====== All variables have been set -> count this run ===================
   else
      TotalRuns=$(($TotalRuns+1))
   fi
}


# ###### Create and perform all runs ########################################
make_runs ()
{
   # ====== Look for MD5 calculator program =================================
   MD5="BAD"
   ( echo Test | md5 )  >/dev/null 2>&1  && MD5="md5"
   if [ "$MD5" = "BAD" ] ; then
      ( echo Test | md5sum )  >/dev/null 2>&1  && MD5="md5sum"
   fi
   if [ "$MD5" = "BAD" ] ; then
      ( echo Test | md5deep )  >/dev/null 2>&1  && MD5="md5deep"
   fi

   # ====== Generate all setting of the current variable $1 =================
   if [ "$1" != "" ] ; then
      local varName="$1"
      local varValues=`eval "echo \\\$$varName""_VALUES"`
      local value
      if [ "$varValues" = "" ] ; then
         echo >&2 "ERROR: No settings for variable $varName found!"
         exit 1
      fi
      shift
      for value in $varValues ; do
         # ====== Use setting $value and recursively set other variables ====
         eval "$varName=$value"
         make_runs $@
      done

   # ====== All variables have been set -> generate a run ===================
   else
      CurrentRun=$(($CurrentRun+1))
      local runLabel=""
      local varSettings=""
      echo -e "=================================== Run $CurrentRun/$TotalRuns ========================================"
      echo -en "Variables:"
      for vN in $Variables ; do
         eval "e=\$$vN"
         eval "numVar=\$NumberOfVariations_$vN"
         runLabel="$runLabel--$e"
         varSettings="$varSettings $e"
         if [ $numVar -ne 1 ] ; then
            echo -en "\t$vN=$e"
         fi
      done
      echo ""

echo $runLabel
      local runHash="`echo $runLabel | $MD5 | awk '{ print zz $1 }'`"
      local runDirectory="$Directory/Run-$runHash"
      local runStatus="$runDirectory/status.txt"
      if [ ! -e "$runDirectory" ] ; then
         mkdir "$runDirectory"
      fi
      perform_run $runDirectory $runStatus

      ./runtimeestimator $runtimeName $TotalRuns $CurrentRun || exit 1
   fi
}


# ###### Perform whole measurement ##########################################
perform_measurements ()
{
   initialize_runs $Variables

   export TotalRuns=0
   count_runs $Variables

   export CurrentRun=0
   runtimeName="$Directory/runtime.dat"
   if [ ! -e "$runtimeName" ] ; then
      ./runtimeestimator $runtimeName $TotalRuns 0 || exit 1
   fi

   make_runs $Variables
   finish_runs $Variables
}
